const fs = require('fs');
const path = require('path');
const { parse } = require('csv-parse/sync');
const dayjs = require('dayjs');
const customParseFormat = require('dayjs/plugin/customParseFormat');

// Extend dayjs with custom parse format plugin
dayjs.extend(customParseFormat);

interface CsvRow {
  Period: string;
  Accounts: string;
  Category: string;
  Note: string;
  SGD: string; // CSV will have this as string, we'll convert to number
}

interface TransactionRow {
  id: string;
  user_id: string;
  account_id: number;
  category_id: number;
  recurring_id: null;
  type: 'expense' | 'income';
  description: string;
  amount: number;
  date: string;
  notes: string | null;
  tags: null;
  created_at: string;
  updated_at: string;
}

// Hardcoded mappings
const ACCOUNT_ID = 1; // Cash account

const CATEGORY_IDS = {
  food: 1,
  transportation: 2,
  entertainment: 3,
  bills: 4,
  shopping: 5,
  health: 6,
  other: 7,
  travel: 8,
  household: 9,
} as const;

// Mapping from CSV categories to our standardized categories
const CSV_CATEGORY_MAPPING: Record<string, keyof typeof CATEGORY_IDS> = {
  food: 'food',
  'self-development': 'other',
  transportation: 'transportation',
  household: 'household',
  clothings: 'shopping',
  beauty: 'other',
  health: 'health',
  education: 'other',
  gift: 'other',
  other: 'other',
  'electric bill': 'bills',
  'internet/phone bill': 'bills',
  game: 'entertainment',
  cab: 'transportation',
  cycling: 'other',
  insurance: 'bills',
  plant: 'shopping',
  tax: 'bills',
  'driving lessons': 'other',
  fossils: 'shopping',
  movie: 'entertainment',
  travel: 'travel',
  subscriptions: 'bills',
  'e-commerce': 'shopping',
  'water bill': 'bills',
  car: 'other',
};

function transformTransactions(filePath: string, userId: string) {
  try {
    // Read and parse the CSV file
    const fileContent = fs.readFileSync(filePath, 'utf-8');
    const records = parse(fileContent, {
      columns: true, // Use the first row as headers
      skip_empty_lines: true,
      trim: true,
    }) as CsvRow[];

    console.log(`Found ${records.length} transactions to transform`);

    // Transform data into transactions
    const transactions = records.map((row: CsvRow): TransactionRow => {
      const excelCategory = row.Category.toLowerCase().trim();
      const mappedCategory = CSV_CATEGORY_MAPPING[excelCategory];

      if (!mappedCategory) {
        throw new Error(
          `Invalid category: "${
            row.Category
          }". Valid categories are: ${Object.keys(CSV_CATEGORY_MAPPING).join(
            ', '
          )}`
        );
      }

      const categoryId = CATEGORY_IDS[mappedCategory];
      const amount = parseFloat(row.SGD);

      if (isNaN(amount)) {
        throw new Error(
          `Invalid amount: ${row.SGD} for category ${row.Category}`
        );
      }

      // Parse the date in DD/MM/YYYY format and convert to ISO string
      const date = dayjs(row.Period, 'DD/MM/YYYY');
      if (!date.isValid()) {
        throw new Error(
          `Invalid date format for period: ${row.Period}. Expected format: DD/MM/YYYY`
        );
      }

      const isoDate = date.format('YYYY-MM-DD');
      const timestamp = date.format('YYYY-MM-DD HH:mm:ssZ'); // For created_at and updated_at

      return {
        id: '', // This will be auto-generated by Supabase
        user_id: userId,
        account_id: ACCOUNT_ID,
        category_id: categoryId,
        recurring_id: null,
        type: 'expense',
        description: row.Note || row.Category,
        amount: Math.abs(amount),
        date: isoDate,
        notes: row.Note || null,
        tags: null,
        created_at: timestamp,
        updated_at: timestamp,
      };
    });

    // Generate CSV content
    const headers = [
      'id',
      'user_id',
      'account_id',
      'category_id',
      'recurring_id',
      'type',
      'description',
      'amount',
      'date',
      'notes',
      'tags',
      'created_at',
      'updated_at',
    ] as const;

    const csvContent = [
      headers.join(','),
      ...transactions.map((t: TransactionRow) =>
        headers
          .map((header) => {
            const value = t[header];
            if (value === null) return '';
            if (Array.isArray(value)) return `"{${value.join(',')}}"`;
            return `"${value}"`;
          })
          .join(',')
      ),
    ].join('\n');

    // Write to CSV file
    const outputPath = path.join(process.cwd(), 'transactions.csv');
    fs.writeFileSync(outputPath, csvContent);

    console.log(`CSV file generated successfully at: ${outputPath}`);
    console.log(`Total transactions: ${transactions.length}`);
  } catch (error) {
    console.error('Transform failed:', error);
  }
}

// Check if file path and user ID are provided
if (process.argv.length < 4) {
  console.log(
    'Usage: ts-node import-transactions.ts <csv-file-path> <user-id>'
  );
  process.exit(1);
}

const [, , filePath, userId] = process.argv;
transformTransactions(filePath, userId);
